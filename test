-- ReGui - A Roblox GUI Library
-- Inspired by Dear ImGui and other modern UI frameworks

local ReGui = {
    Version = "1.0.0",
    Author = "YourName",
    License = "MIT",
    
    -- Configuration
    DefaultTheme = "Dark",
    Themes = {
        Dark = {
            Background = Color3.fromRGB(30, 30, 30),
            Foreground = Color3.fromRGB(200, 200, 200),
            Accent = Color3.fromRGB(0, 120, 215),
            Text = Color3.fromRGB(240, 240, 240),
            Border = Color3.fromRGB(60, 60, 60)
        },
        Light = {
            Background = Color3.fromRGB(240, 240, 240),
            Foreground = Color3.fromRGB(50, 50, 50),
            Accent = Color3.fromRGB(0, 120, 215),
            Text = Color3.fromRGB(30, 30, 30),
            Border = Color3.fromRGB(200, 200, 200)
        }
    },
    
    -- Elements
    Elements = {},
    Windows = {},
    ActiveWindow = nil
}

-- Core Functions
function ReGui:Init()
    -- Create main container
    self.Container = Instance.new("ScreenGui")
    self.Container.Name = "ReGui"
    self.Container.Parent = game:GetService("CoreGui")
    
    -- Set default theme
    self.CurrentTheme = self.Themes[self.DefaultTheme]
end

function ReGui:SetTheme(themeName)
    if self.Themes[themeName] then
        self.CurrentTheme = self.Themes[themeName]
        self:UpdateTheme()
    end
end

function ReGui:UpdateTheme()
    -- Update all existing elements with new theme
    for _, window in pairs(self.Windows) do
        self:ApplyTheme(window)
    end
end

function ReGui:ApplyTheme(element)
    -- Apply theme colors to an element
    -- This would be implemented per element type
end

-- Window Management
function ReGui:Window(title, size, position, flags)
    local window = {
        Title = title,
        Size = size or UDim2.new(0, 300, 0, 400),
        Position = position or UDim2.new(0.5, -150, 0.5, -200),
        Flags = flags or {},
        Elements = {}
    }
    
    -- Create window frame
    local frame = Instance.new("Frame")
    frame.Name = title
    frame.Size = window.Size
    frame.Position = window.Position
    frame.BackgroundColor3 = self.CurrentTheme.Background
    frame.BorderColor3 = self.CurrentTheme.Border
    frame.Parent = self.Container
    
    -- Add title bar
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 24)
    titleBar.BackgroundColor3 = self.CurrentTheme.Accent
    titleBar.BorderSizePixel = 0
    titleBar.Parent = frame
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Text = title
    titleLabel.TextColor3 = self.CurrentTheme.Text
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextSize = 14
    titleLabel.BackgroundTransparency = 1
    titleLabel.Size = UDim2.new(1, -40, 1, 0)
    titleLabel.Parent = titleBar
    
    -- Add close button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Text = "X"
    closeButton.TextColor3 = self.CurrentTheme.Text
    closeButton.Font = Enum.Font.SourceSansBold
    closeButton.TextSize = 14
    closeButton.BackgroundTransparency = 1
    closeButton.Size = UDim2.new(0, 24, 0, 24)
    closeButton.Position = UDim2.new(1, -24, 0, 0)
    closeButton.Parent = titleBar
    
    -- Add content area
    local content = Instance.new("Frame")
    content.Name = "Content"
    content.Size = UDim2.new(1, 0, 1, -24)
    content.Position = UDim2.new(0, 0, 0, 24)
    content.BackgroundColor3 = self.CurrentTheme.Background
    content.BorderSizePixel = 0
    content.Parent = frame
    
    -- Add to windows table
    table.insert(self.Windows, window)
    window.Frame = frame
    window.Content = content
    
    -- Make draggable
    self:MakeDraggable(titleBar, frame)
    
    return window
end

function ReGui:MakeDraggable(dragHandle, target)
    local dragging = false
    local dragStart, frameStart
    
    dragHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            frameStart = target.Position
            
            self.ActiveWindow = target
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            target.Position = UDim2.new(
                frameStart.X.Scale, 
                frameStart.X.Offset + delta.X,
                frameStart.Y.Scale,
                frameStart.Y.Offset + delta.Y
            )
        end
    end)
    
    game:GetService("UserInputService").InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
end

-- UI Elements
function ReGui.Elements:Button(window, text, size, callback)
    local button = Instance.new("TextButton")
    button.Name = "Button"
    button.Text = text
    button.Size = size or UDim2.new(0, 100, 0, 30)
    button.BackgroundColor3 = ReGui.CurrentTheme.Accent
    button.TextColor3 = ReGui.CurrentTheme.Text
    button.Font = Enum.Font.SourceSans
    button.TextSize = 14
    button.Parent = window.Content
    
    if callback then
        button.MouseButton1Click:Connect(callback)
    end
    
    return button
end

function ReGui.Elements:Label(window, text, size)
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Text = text
    label.Size = size or UDim2.new(1, -10, 0, 20)
    label.BackgroundTransparency = 1
    label.TextColor3 = ReGui.CurrentTheme.Text
    label.Font = Enum.Font.SourceSans
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = window.Content
    
    return label
end

function ReGui.Elements:Slider(window, text, min, max, value, callback)
    local container = Instance.new("Frame")
    container.Name = "Slider"
    container.Size = UDim2.new(1, -10, 0, 40)
    container.BackgroundTransparency = 1
    container.Parent = window.Content
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Text = text
    label.Size = UDim2.new(1, 0, 0, 20)
    label.BackgroundTransparency = 1
    label.TextColor3 = ReGui.CurrentTheme.Text
    label.Font = Enum.Font.SourceSans
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container
    
    local slider = Instance.new("Frame")
    slider.Name = "Track"
    slider.Size = UDim2.new(1, 0, 0, 10)
    slider.Position = UDim2.new(0, 0, 0, 25)
    slider.BackgroundColor3 = ReGui.CurrentTheme.Foreground
    slider.BorderColor3 = ReGui.CurrentTheme.Border
    slider.Parent = container
    
    local fill = Instance.new("Frame")
    fill.Name = "Fill"
    fill.Size = UDim2.new(0.5, 0, 1, 0)
    fill.BackgroundColor3 = ReGui.CurrentTheme.Accent
    fill.BorderSizePixel = 0
    fill.Parent = slider
    
    local handle = Instance.new("Frame")
    handle.Name = "Handle"
    handle.Size = UDim2.new(0, 10, 0, 20)
    handle.Position = UDim2.new(0.5, -5, 0, -5)
    handle.BackgroundColor3 = ReGui.CurrentTheme.Accent
    handle.BorderColor3 = ReGui.CurrentTheme.Border
    handle.Parent = slider
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Name = "Value"
    valueLabel.Text = tostring(value or min)
    valueLabel.Size = UDim2.new(0, 50, 0, 20)
    valueLabel.Position = UDim2.new(1, 5, 0, 0)
    valueLabel.BackgroundTransparency = 1
    valueLabel.TextColor3 = ReGui.CurrentTheme.Text
    valueLabel.Font = Enum.Font.SourceSans
    valueLabel.TextSize = 14
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.Parent = slider
    
    -- Slider logic would go here
    
    return {
        Container = container,
        Label = label,
        Slider = slider,
        Fill = fill,
        Handle = handle,
        ValueLabel = valueLabel
    }
end

-- Initialize the library
ReGui:Init()

return ReGui
