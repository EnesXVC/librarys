local EasyLib = {}

function EasyLib:CreateWindow(title)
    local EasyLib = Instance.new("ScreenGui")
    local Main = Instance.new("Frame")
    local UICorner = Instance.new("UICorner")
    local TopBar = Instance.new("Frame")
    local Title = Instance.new("TextLabel")
    local CloseButton = Instance.new("TextButton")
    local TabsContainer = Instance.new("Frame")
    local ContentContainer = Instance.new("Frame")

    -- Main GUI Setup
    EasyLib.Name = "EasyLib"
    EasyLib.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    EasyLib.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    Main.Name = "Main"
    Main.Parent = EasyLib
    Main.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    Main.Position = UDim2.new(0.3, 0, 0.3, 0)
    Main.Size = UDim2.new(0.4, 0, 0.4, 0)
    UICorner.CornerRadius = UDim.new(0, 6)
    UICorner.Parent = Main

    -- Top Bar
    TopBar.Name = "TopBar"
    TopBar.Parent = Main
    TopBar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    TopBar.Size = UDim2.new(1, 0, 0.12, 0)

    Title.Name = "Title"
    Title.Parent = TopBar
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0.03, 0, 0.1, 0)
    Title.Size = UDim2.new(0.8, 0, 0.8, 0)
    Title.Font = Enum.Font.Jura
    Title.Text = title or "EasyLib"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextScaled = true
    Title.TextXAlignment = Enum.TextXAlignment.Left

    CloseButton.Name = "CloseButton"
    CloseButton.Parent = TopBar
    CloseButton.BackgroundTransparency = 1
    CloseButton.Position = UDim2.new(0.92, 0, 0.1, 0)
    CloseButton.Size = UDim2.new(0.08, 0, 0.8, 0)
    CloseButton.Font = Enum.Font.Jura
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Color3.fromRGB(255, 100, 100)
    CloseButton.TextScaled = true

    -- Tabs and Content Area
    TabsContainer.Name = "TabsContainer"
    TabsContainer.Parent = Main
    TabsContainer.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    TabsContainer.Position = UDim2.new(0, 0, 0.12, 0)
    TabsContainer.Size = UDim2.new(0.2, 0, 0.88, 0)

    ContentContainer.Name = "ContentContainer"
    ContentContainer.Parent = Main
    ContentContainer.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    ContentContainer.Position = UDim2.new(0.2, 0, 0.12, 0)
    ContentContainer.Size = UDim2.new(0.8, 0, 0.88, 0)

    -- Draggable Window
    local dragging, dragStart, startPos
    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Main.Position
        end
    end)

    TopBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            local delta = input.Position - dragStart
            Main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and not dragging then
            dragging = false
        end
    end)

    CloseButton.MouseButton1Click:Connect(function()
        EasyLib:Destroy()
    end)

    -- Window Functions
    local window = {}
    local tabs = {}
    local currentTab = nil

    function window:CreateTab(name)
        local TabButton = Instance.new("TextButton")
        TabButton.Name = name
        TabButton.Parent = TabsContainer
        TabButton.Size = UDim2.new(1, 0, 0, 35)
        TabButton.Text = name
        TabButton.Font = Enum.Font.Jura
        TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        TabButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        TabButton.AutoButtonColor = false

        local TabContent = Instance.new("ScrollingFrame")
        TabContent.Name = name .. "Content"
        TabContent.Parent = ContentContainer
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.BackgroundTransparency = 1
        TabContent.ScrollBarThickness = 3
        TabContent.Visible = false
        TabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y

        local ContentLayout = Instance.new("UIListLayout")
        ContentLayout.Parent = TabContent
        ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ContentLayout.Padding = UDim.new(0, 5)

        -- Tab Selection
        TabButton.MouseButton1Click:Connect(function()
            if currentTab then
                currentTab.Visible = false
            end
            TabContent.Visible = true
            currentTab = TabContent
            TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            for _, btn in pairs(TabsContainer:GetChildren()) do
                if btn:IsA("TextButton") and btn ~= TabButton then
                    btn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                end
            end
        end)

        -- Tab Functions
        local tab = {}

        function tab:AddButton(text, callback)
            local Button = Instance.new("TextButton")
            Button.Name = text
            Button.Parent = TabContent
            Button.Size = UDim2.new(0.95, 0, 0, 40)
            Button.Text = text
            Button.Font = Enum.Font.Jura
            Button.TextColor3 = Color3.fromRGB(255, 255, 255)
            Button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            Button.AutoButtonColor = true

            local UICorner = Instance.new("UICorner")
            UICorner.CornerRadius = UDim.new(0, 4)
            UICorner.Parent = Button

            Button.MouseButton1Click:Connect(function()
                if callback then callback() end
            end)

            return Button
        end

        function tab:AddToggle(text, default, callback)
            local ToggleFrame = Instance.new("Frame")
            ToggleFrame.Name = text .. "Toggle"
            ToggleFrame.Parent = TabContent
            ToggleFrame.Size = UDim2.new(0.95, 0, 0, 40)
            ToggleFrame.BackgroundTransparency = 1

            local ToggleButton = Instance.new("TextButton")
            ToggleButton.Name = "ToggleButton"
            ToggleButton.Parent = ToggleFrame
            ToggleButton.Size = UDim2.new(0.7, 0, 1, 0)
            ToggleButton.Text = "  " .. text
            ToggleButton.Font = Enum.Font.Jura
            ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            ToggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            ToggleButton.TextXAlignment = Enum.TextXAlignment.Left
            ToggleButton.AutoButtonColor = false

            local ToggleBox = Instance.new("Frame")
            ToggleBox.Name = "ToggleBox"
            ToggleBox.Parent = ToggleFrame
            ToggleBox.Size = UDim2.new(0.2, 0, 0.6, 0)
            ToggleBox.Position = UDim2.new(0.75, 0, 0.2, 0)
            ToggleBox.BackgroundColor3 = Color3.fromRGB(80, 80, 80)

            local UICorner = Instance.new("UICorner")
            UICorner.CornerRadius = UDim.new(0, 4)
            UICorner.Parent = ToggleBox

            local ToggleTick = Instance.new("TextLabel")
            ToggleTick.Name = "Tick"
            ToggleTick.Parent = ToggleBox
            ToggleTick.Size = UDim2.new(1, 0, 1, 0)
            ToggleTick.Text = default and "✓" or ""
            ToggleTick.Font = Enum.Font.Jura
            ToggleTick.TextColor3 = Color3.fromRGB(0, 255, 0)
            ToggleTick.TextScaled = true
            ToggleTick.BackgroundTransparency = 1

            local isToggled = default or false

            local function updateToggle()
                ToggleTick.Text = isToggled and "✓" or ""
                if callback then callback(isToggled) end
            end

            ToggleButton.MouseButton1Click:Connect(function()
                isToggled = not isToggled
                updateToggle()
            end)

            ToggleBox.MouseButton1Click:Connect(function()
                isToggled = not isToggled
                updateToggle()
            end)

            return {
                Set = function(value) isToggled = value updateToggle() end,
                Get = function() return isToggled end
            }
        end

        -- Select first tab by default
        if #tabs == 0 then
            TabContent.Visible = true
            currentTab = TabContent
            TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        end

        table.insert(tabs, tab)
        return tab
    end

    return window
end

return EasyLib
